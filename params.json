{
  "name": "Jekyll Cloudinary Liquid tag",
  "tagline": "Liquid tag for Jekyll to use Cloudinary for optimized responsive posts images.",
  "body": "[![Gem Version](https://badge.fury.io/rb/jekyll-cloudinary.svg)](https://badge.fury.io/rb/jekyll-cloudinary)\r\n[![Gem Downloads](https://img.shields.io/gem/dt/jekyll-cloudinary.svg?style=flat)](http://rubygems.org/gems/jekyll-cloudinary)\r\n\r\n`jekyll-cloudinary` is a [Jekyll](http://jekyllrb.com/) plugin adding a [Liquid](http://liquidmarkup.org) tag to ease the use of [Cloudinary](http://cloudinary.com/invites/lpov9zyyucivvxsnalc5/sgyyc0j14k6p0sbt51nw) for responsive images in your Markdown/[Kramdown](http://kramdown.gettalong.org/) posts.\r\n\r\nIt builds the HTML for responsive images in the posts, using the `srcset` and `sizes` attributes for the `<img />` tag (see [the \"varying size and density\" section of this post by Jake Archibald](https://jakearchibald.com/2015/anatomy-of-responsive-images/#varying-size-and-density) if this is new for you). URLs in the `srcset` are cloudinary URLs that [fetch on-the-fly](http://cloudinary.com/features#fetch) the post's images and resizes them to several sizes.\r\n\r\nYou are in full control of the number of generated images and their size, and the `sizes` attribute that helps the browser decide which image to download. See the complete configuration options for details.\r\n\r\nHere is the general syntax of this Liquid tag:\r\n\r\n```liquid\r\n{% cloudinary [preset] path/to/img.jpg [attr=\"value\"] %}\r\n```\r\n\r\n## Installation\r\n\r\n[Sign up for free on Cloudinary](http://cloudinary.com/invites/lpov9zyyucivvxsnalc5/sgyyc0j14k6p0sbt51nw). The free account should be enough for most blogs.\r\n\r\nAdd `gem 'jekyll-cloudinary'` to your `Gemfile` and run `bundle update` to install the gem.\r\n\r\nAdd `jekyll-cloudinary` to your `_config.yml` like the following:\r\n\r\n```yaml\r\ngems:\r\n  - jekyll-cloudinary\r\n```\r\n\r\n## Configuration\r\n\r\n### Mandatory settings\r\n\r\nAdd `cloudinary` to your `_config.yml` and your Cloudinary \"Cloud name\" (find it in your [Cloudinary dashboard](https://cloudinary.com/console)):\r\n\r\n```yaml\r\ncloudinary:\r\n  cloud_name: <put here your Cloudinary \"Cloud name\">\r\n```\r\n\r\n### Optional global settings\r\n\r\nYou can now define some global settings\r\n\r\n```yaml\r\ncloudinary:\r\n  …\r\n  verbose: true\r\n```\r\n\r\n#### `verbose` (default: `false`)\r\n\r\nWhen set to `true`, this setting will show messages in the console when something goes wrong, such as:\r\n\r\n```\r\n[Cloudinary] Couldn't find this image to check its width: /path/to/jekyll/_site/assets/img.jpg\r\n```\r\n\r\nor\r\n\r\n```\r\n[Cloudinary] Natural width of source image 'img.jpg' (720px) in _posts/2016-06-09-post.md not enough for creating 1600px version\r\n```\r\n\r\n### Optional (but highly recommended) presets\r\n\r\nYou can now define the presets you need for your posts' images, starting with the default one:\r\n\r\n#### Default preset\r\n\r\nThe default preset is the one you don't even have to mention when using the Liquid tag, and that will be used if a preset you use in the tag doesn't exist.\r\n\r\n```yaml\r\ncloudinary:\r\n  …\r\n  presets:\r\n    default:\r\n      min_size: 320\r\n      max_size: 1600\r\n      steps: 5\r\n      sizes: \"(min-width: 50rem) 50rem, 90vw\"\r\n```\r\n\r\nThis preset will generate five images 320 to 1600 pixels wide in the `srcset` and define `sizes` as `\"(min-width: 50rem) 50rem, 90vw\"`.\r\n\r\nWith this preset, you only have to write this in your Markdown post:\r\n\r\n```liquid\r\n{% cloudinary /assets/img.jpg alt=\"beautiful!\" %}\r\n```\r\n\r\nTo get this HTML:\r\n\r\n```html\r\n<img\r\n  src=\"https://<your-domain>/assets/img.jpg\"\r\n  srcset=\"\r\n    http://res.cloudinary.com/<cloud_name>/image/fetch/c_scale,w_320,q_auto,f_auto/https://<your-domain>/assets/img.jpg 320w,\r\n    http://res.cloudinary.com/<cloud_name>/image/fetch/c_scale,w_640,q_auto,f_auto/https://<your-domain>/assets/img.jpg 640w\r\n    http://res.cloudinary.com/<cloud_name>/image/fetch/c_scale,w_960,q_auto,f_auto/https://<your-domain>/assets/img.jpg 960w\r\n    http://res.cloudinary.com/<cloud_name>/image/fetch/c_scale,w_1280,q_auto,f_auto/https://<your-domain>/assets/img.jpg 1280w\r\n    http://res.cloudinary.com/<cloud_name>/image/fetch/c_scale,w_1600,q_auto,f_auto/https://<your-domain>/assets/img.jpg 1600w\r\n    \"\r\n  sizes=\"(min-width: 50rem) 50rem, 90vw\"\r\n  alt=\"beautiful!\"\r\n/>\r\n```\r\n\r\nThere is a true default `default` preset, but you're strongly encouraged to define your own default preset.\r\n\r\n#### Additional presets\r\n\r\nYou can add other presets if you need several image sizes in your posts.\r\n\r\nHere is an example for images that take only one third of the post width:\r\n\r\n```yaml\r\ncloudinary:\r\n  …\r\n  presets:\r\n    …\r\n    onethird:\r\n      min_size: 110\r\n      max_size: 535\r\n      steps: 3\r\n      sizes: \"(min-width: 50rem) 17rem, 30vw\"\r\n      attributes:\r\n        class: \"one3rd\"\r\n```\r\n\r\nTo use this additional preset, you will have to write this in your Markdown post:\r\n\r\n```liquid\r\n{% cloudinary onethird /assets/img.jpg %}\r\n```\r\n\r\nThe generated element will also get a `class=\"one3rd\"` that can be useful for example with this CSS:\r\n\r\n```css\r\n.one3rd {\r\n  max-width: 33%;\r\n  float: right;\r\n  margin: 0 0 1em 1em;\r\n}\r\n```\r\n\r\n### Detailed preset settings\r\n\r\n#### `figure` (default: `auto`)\r\n\r\nThis setting lets you decide what to do when there is a `caption` attribute in the Cloudinary Liquid tag.\r\n\r\nThe value can be:\r\n\r\n- `auto` (default): will generate a `<figure>` and `<figcaption>` only if there's a caption\r\n- `never`: will always generate a `<img>`, losing the caption\r\n- `always`: will always generate a `<figure>` and `<figcaption>`, even if there's no `caption` attribute\r\n\r\nIf a `<figure>` is generated and there are attributes in the Liquid tag, they are added to the `<img>` if they are `alt` or `title`, or to the `<figure>`.\r\n\r\n#### `min_size` (default: `320`)\r\n\r\n#### `max_size` (default: `1200`)\r\n\r\n#### `steps` (default: `5`)\r\n\r\n#### `sizes` (default: `\"100vw\"`)\r\n\r\n#### `attributes` (default: none)\r\n\r\nAttributes are added without transformation to the generated element.\r\n\r\nYou can obviously define the `alt` attribute, mandatory for accessibility, but you can also set a `title`, a `class`, `aria-*` attributes for enhanced accessibility, or even `data-*` attributes you would like to use later with CSS or JavaScript.\r\n\r\nThe `caption` attribute is the only one that can act differently, depending on the `figure` setting.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}